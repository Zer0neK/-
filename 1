--[[
     _      ___         ____  ______
    | | /| / (_)__  ___/ / / / /  _/
    | |/ |/ / / _ \/ _  / /_/ // /  
    |__/|__/_/_//_/\_,_/\____/___/
    
    by .ftgs#0 (Discord)
    
    This script is NOT intended to be modified.
    To view the source code, see the 'Src' folder on the official GitHub repository.
    
    Author: .ftgs#0 (Discord User)
    Github: https://github.com/Footagesus/WindUI
    Discord: https://discord.gg/84CNGY5wAV
]]

local WindUI = {}

-- Internal cache and loader
WindUI.cache = {}
function WindUI.load(moduleName)
  if not WindUI.cache[moduleName] then
    WindUI.cache[moduleName] = { module = WindUI[moduleName]() }
  end
  return WindUI.cache[moduleName].module
end

do
  -- Define themes
  function WindUI.Themes()
    return {
      Dark = {
        Name = "Dark",
        Accent = "#131313",
        Outline = "#FFFFFF",
        Text = "#FFFFFF",
        PlaceholderText = "#999999"
      },
      Light = {
        Name = "Light",
        Accent = "#FFFFFF",
        Outline = "#000000",
        Text = "#000000",
        PlaceholderText = "#777777"
      },
      Rose = {
        Name = "Rose",
        Accent = "#500830",
        Outline = "#FFFFFF",
        Text = "#FFFFFF",
        PlaceholderText = "#6B7280"
      },
      Plant = {
        Name = "Plant",
        Accent = "#102d04",
        Outline = "#FFFFFF",
        Text = "#e6ffe5",
        PlaceholderText = "#7d977d"
      },
      Red = {
        Name = "Red",
        Accent = "#28050a",
        Outline = "#FFFFFF",
        Text = "#ffeded",
        PlaceholderText = "#977d7d"
      }
    }
  end

  -- UI helper functions
  function WindUI.Helpers()
    local RunService = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")
    local IconLoader = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Footagesus/Icons/main/Main.lua"))()

    IconLoader.SetIconsType("lucide")

    local UIHelpers = {
      Font = "rbxassetid://12187365364",
      CanDraggable = true,
      Theme = nil,
      Objects = {},
      FontObjects = {},
      DefaultProperties = {
        ScreenGui = {
          ResetOnSpawn = false,
          ZIndexBehavior = "Sibling"
        },
        CanvasGroup = {
          BorderSizePixel = 0,
          BackgroundColor3 = Color3.new(1, 1, 1)
        },
        Frame = {
          BorderSizePixel = 0,
          BackgroundColor3 = Color3.new(1, 1, 1)
        },
        TextLabel = {
          BackgroundColor3 = Color3.new(1, 1, 1),
          BorderSizePixel = 0,
          Text = "",
          RichText = true,
          TextColor3 = Color3.new(1, 1, 1),
          TextSize = 14
        },
        TextButton = {
          BackgroundColor3 = Color3.new(1, 1, 1),
          BorderSizePixel = 0,
          Text = "",
          AutoButtonColor = false,
          TextColor3 = Color3.new(1, 1, 1),
          TextSize = 14
        },
        TextBox = {
          BackgroundColor3 = Color3.new(1, 1, 1),
          BorderColor3 = Color3.new(0, 0, 0),
          ClearTextOnFocus = false,
          Text = "",
          TextColor3 = Color3.new(0, 0, 0),
          TextSize = 14
        },
        ImageLabel = {
          BackgroundTransparency = 1,
          BackgroundColor3 = Color3.new(1, 1, 1),
          BorderSizePixel = 0
        },
        ImageButton = {
          BackgroundColor3 = Color3.new(1, 1, 1),
          BorderSizePixel = 0,
          AutoButtonColor = false
        },
        UIListLayout = {
          SortOrder = "LayoutOrder"
        }
      },
      Colors = {
        Red = "#e53935",
        Orange = "#f57c00",
        Green = "#43a047",
        Blue = "#039be5",
        White = "#ffffff",
        Grey = "#616161"
      }
    }

    function UIHelpers.SetTheme(theme)
      UIHelpers.Theme = theme
      UIHelpers.UpdateTheme(nil, true)
    end

    function UIHelpers.AddFontObject(fontObject)
      table.insert(UIHelpers.FontObjects, fontObject)
      UIHelpers.UpdateFont(UIHelpers.Font)
    end

    function UIHelpers.UpdateFont(fontAssetId)
      UIHelpers.Font = fontAssetId
      for i, fontObject in next, UIHelpers.FontObjects do
        fontObject.FontFace = Font.new(fontAssetId, fontObject.FontFace.Weight, fontObject.FontFace.Style)
      end
    end

    function UIHelpers.GetThemeProperty(propertyName, theme)
      return theme[propertyName]
    end

    function UIHelpers.AddThemeObject(object, properties)
      UIHelpers.Objects[object] = { Object = object, Properties = properties }
      UIHelpers.UpdateTheme(object)
      return object
    end

    function UIHelpers.UpdateTheme(object, instant)
      local updateObjectTheme = function(themeObject)
        for propertyName, themePropertyName in pairs(themeObject.Properties or {}) do
          local themeValue = UIHelpers.GetThemeProperty(themePropertyName, UIHelpers.Theme)
          if themeValue then
            if instant then
              themeObject.Object[propertyName] = Color3.fromHex(themeValue)
            else
              UIHelpers.Tween(themeObject.Object, 0.08, { [propertyName] = Color3.fromHex(themeValue) }):Play()
            end
          end
        end
      end

      if object then
        local themeObject = UIHelpers.Objects[object]
        if themeObject then
          updateObjectTheme(themeObject)
        end
      else
        for object, themeObject in pairs(UIHelpers.Objects) do
          updateObjectTheme(themeObject)
        end
      end
    end

    function UIHelpers.Icon(iconName)
      return IconLoader.Icon(iconName)
    end

    function UIHelpers.New(instanceType, properties, children)
      local newInstance = Instance.new(instanceType)

      for property, value in next, UIHelpers.DefaultProperties[instanceType] or {} do
        newInstance[property] = value
      end

      for property, value in next, properties or {} do
        if property ~= "ThemeTag" then
          newInstance[property] = value
        end
      end

      for property, child in next, children or {} do
        child.Parent = newInstance
      end

      if properties and properties.ThemeTag then
        UIHelpers.AddThemeObject(newInstance, properties.ThemeTag)
      end

      if properties and properties.FontFace then
        UIHelpers.AddFontObject(newInstance)
      end

      return newInstance
    end

    function UIHelpers.Tween(instance, duration, properties, ...)
      return TweenService:Create(instance, TweenInfo.new(duration, ...), properties)
    end

    local New = UIHelpers.New
    local Tween = UIHelpers.Tween

    function UIHelpers.SetDraggable(draggable)
      UIHelpers.CanDraggable = draggable
    end

    function UIHelpers.ToolTip(toolTipData)
      local toolTip = {
        Title = toolTipData.Title or "ToolTip",
        Container = nil,
        ToolTipSize = 16
      }

      local titleLabel = New("TextLabel", {
        AutomaticSize = "XY",
        TextWrapped = true,
        BackgroundTransparency = 1,
        FontFace = Font.new(UIHelpers.Font, Enum.FontWeight.Medium),
        Text = toolTip.Title,
        TextSize = 17,
        ThemeTag = { TextColor3 = "Text" }
      })

      local uiScale = New("UIScale", { Scale = 0.9 })

      local canvasGroup = New("CanvasGroup", {
        AnchorPoint = Vector2.new(0.5, 0),
        AutomaticSize = "XY",
        BackgroundTransparency = 1,
        Parent = toolTipData.Parent,
        GroupTransparency = 1,
        Visible = false
      }, {
        New("UISizeConstraint", { MaxSize = Vector2.new(400, math.huge) }),
        New("Frame", {
          AutomaticSize = "XY",
          BackgroundTransparency = 1,
          LayoutOrder = 99,
          Visible = false
        }, {
          New("ImageLabel", {
            Size = UDim2.new(0, toolTip.ToolTipSize, 0, toolTip.ToolTipSize / 2),
            BackgroundTransparency = 1,
            Rotation = 180,
            Image = "rbxassetid://89524607682719",
            ThemeTag = { ImageColor3 = "Accent" }
          }, {
            New("ImageLabel", {
              Size = UDim2.new(0, toolTip.ToolTipSize, 0, toolTip.ToolTipSize / 2),
              BackgroundTransparency = 1,
              LayoutOrder = 99,
              ImageTransparency = 0.9,
              Image = "rbxassetid://89524607682719",
              ThemeTag = { ImageColor3 = "Text" }
            })
          })
        }),
        New("Frame", { AutomaticSize = "XY", ThemeTag = { BackgroundColor3 = "Accent" } }, {
          New("UICorner", { CornerRadius = UDim.new(0, 16) }),
          New("Frame", {
            ThemeTag = { BackgroundColor3 = "Text" },
            AutomaticSize = "XY",
            BackgroundTransparency = 0.9
          }, {
            New("UICorner", { CornerRadius = UDim.new(0, 16) }),
            New("UIListLayout", {
              Padding = UDim.new(0, 12),
              FillDirection = "Horizontal",
              VerticalAlignment = "Center"
            }),
            titleLabel,
            New("UIPadding", {
              PaddingTop = UDim.new(0, 12),
              PaddingLeft = UDim.new(0, 12),
              PaddingRight = UDim.new(0, 12),
              PaddingBottom = UDim.new(0, 12)
            })
          })
        }),
        uiScale,
        New("UIListLayout", {
          Padding = UDim.new(0, 0),
          FillDirection = "Vertical",
          VerticalAlignment = "Center",
          HorizontalAlignment = "Center"
        })
      })

      toolTip.Container = canvasGroup

      function toolTip:Open()
        canvasGroup.Visible = true
        Tween(canvasGroup, 0.25, { GroupTransparency = 0 }, Enum.EasingStyle.Quint, Enum.EasingDirection.Out):Play()
        Tween(uiScale, 0.25, { Scale = 1 }, Enum.EasingStyle.Quint, Enum.EasingDirection.Out):Play()
      end

      function toolTip:Close()
        Tween(canvasGroup, 0.25, { GroupTransparency = 1 }, Enum.EasingStyle.Quint, Enum.EasingDirection.Out):Play()
        Tween(uiScale, 0.25, { Scale = 0.9 }, Enum.EasingStyle.Quint, Enum.EasingDirection.Out):Play()
        task.wait(0.25)
        canvasGroup.Visible = false
        canvasGroup:Destroy()
      end

      return toolTip
    end

    function UIHelpers.Drag(draggableObject, canDrag)
      local dragData = { CanDraggable = true }
      local isDragging = false
      local dragStartPos
      local objectStartPos
      local currentInput

      local dragUpdate = function(input)
        local delta = input.Position - dragStartPos
        Tween(draggableObject, 0.08, {
          Position = UDim2.new(
            objectStartPos.X.Scale,
            objectStartPos.X.Offset + delta.X,
            objectStartPos.Y.Scale,
            objectStartPos.Y.Offset + delta.Y
          )
        }):Play()
      end

      draggableObject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
          isDragging = true
          dragStartPos = input.Position
          objectStartPos = draggableObject.Position

          input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
              isDragging = false
            end
          end)
        end
      end)

      draggableObject.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
          currentInput = input
        end
      end)

      UserInputService.InputChanged:Connect(function(input)
        if input == currentInput and isDragging then
          if canDrag then
            if UIHelpers.CanDraggable then
              dragUpdate(input)
            end
          elseif dragData.CanDraggable then
            dragUpdate(input)
          end
        end
      end)

      function dragData:Set(draggable)
        dragData.CanDraggable = draggable
      end

      return dragData
    end

    return UIHelpers
  end

  -- Key system module
  function WindUI.KeySystem()
    local Helpers = WindUI.load("Helpers")
    local New = Helpers.New
    local Tween = Helpers.Tween

    local KeySystemModule = {
      UICorner = 14,
      UIPadding = 12,
      Holder = nil,
      Window = nil
    }

    function KeySystemModule:Init(window)
      KeySystemModule.Window = window
      return KeySystemModule
    end

    function KeySystemModule:Create(isPopup)
      local UI = {
        UICorner = 16,
        UIPadding = 16,
        UIElements = {}
      }

      if isPopup then
        UI.UIPadding = 0
      end

      if isPopup then
        UI.UICorner = 22
      end

      if not isPopup then
        UI.UIElements.FullScreen = New("Frame", {
          ZIndex = 999,
          BackgroundTransparency = 1,
          BackgroundColor3 = Color3.fromHex("#2a2a2a"),
          Size = UDim2.new(1, 0, 1, 0),
          Active = false,
          Visible = false,
          Parent = isPopup and KeySystemModule.Window or KeySystemModule.Window.UIElements.Main.Main
        }, {
          New("UICorner", { CornerRadius = UDim.new(0, KeySystemModule.Window.UICorner) })
        })
      end

      UI.UIElements.Main = New("Frame", {
        ThemeTag = { BackgroundColor3 = "Accent" },
        AutomaticSize = "XY",
        BackgroundTransparency = 0.7
      }, {
        New("UIPadding", {
          PaddingTop = UDim.new(0, UI.UIPadding),
          PaddingLeft = UDim.new(0, UI.UIPadding),
          PaddingRight = UDim.new(0, UI.UIPadding),
          PaddingBottom = UDim.new(0, UI.UIPadding)
        })
      })

      UI.UIElements.MainContainer = New("CanvasGroup", {
        Visible = false,
        GroupTransparency = 1,
        BackgroundTransparency = isPopup and 0.15 or 0,
        Parent = isPopup and KeySystemModule.Window or UI.UIElements.FullScreen,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        AutomaticSize = "XY",
        ThemeTag = { BackgroundColor3 = "Accent" }
      }, {
        UI.UIElements.Main,
        New("UIScale", { Scale = 0.9 }),
        New("UICorner", { CornerRadius = UDim.new(0, UI.UICorner) }),
        New("UIStroke", { Thickness = 0.8, ThemeTag = { Color = "Outline" }, Transparency = 1 })
      })

      function UI:Open()
        if not isPopup then
          UI.UIElements.FullScreen.Visible = true
          UI.UIElements.FullScreen.Active = true
        end

        task.spawn(function()
          task.wait(0.1)
          UI.UIElements.MainContainer.Visible = true

          if not isPopup then
            Tween(UI.UIElements.FullScreen, 0.1, { BackgroundTransparency = 0.5 }):Play()
          end

          Tween(UI.UIElements.MainContainer, 0.1, { GroupTransparency = 0 }):Play()
          Tween(UI.UIElements.MainContainer.UIScale, 0.1, { Scale = 1 }):Play()
          Tween(UI.UIElements.MainContainer.UIStroke, 0.1, { Transparency = 1 }):Play()
        end)
      end

      function UI:Close()
        if not isPopup then
          Tween(UI.UIElements.FullScreen, 0.1, { BackgroundTransparency = 1 }):Play()
          UI.UIElements.FullScreen.Active = false
          task.spawn(function()
            task.wait(0.1)
            UI.UIElements.FullScreen.Visible = false
          end)
        end

        Tween(UI.UIElements.MainContainer, 0.1, { GroupTransparency = 1 }):Play()
        Tween(UI.UIElements.MainContainer.UIScale, 0.1, { Scale = 0.9 }):Play()
        Tween(UI.UIElements.MainContainer.UIStroke, 0.1, { Transparency = 1 }):Play()

        return function()
          task.spawn(function()
            task.wait(0.1)
            if not isPopup then
              UI.UIElements.FullScreen:Destroy()
            else
              UI.UIElements.MainContainer:Destroy()
            end
          end)
        end
      end

      return UI
    end

    return KeySystemModule
  end

  -- Key system creator
  function WindUI.KeySystemCreator()
    local UI = {}
    local Helpers = WindUI.load("Helpers")
    local KeySystemModule = WindUI.load("KeySystem")
    local New = Helpers.New
    local Tween = Helpers.Tween

    function UI:new(config, keySavedCallback, key)
      local keySystem = KeySystemModule:Init(config.WindUI.ScreenGui.KeySystem)
      local uiElements, thumbnailSize, mainSize = keySystem:Create(true), 200, 430

      if config.KeySystem.Thumbnail and config.KeySystem.Thumbnail.Image then
        mainSize = 430 + (thumbnailSize / 2)
      end

      uiElements.UIElements.Main.AutomaticSize = "Y"
      uiElements.UIElements.Main.Size = UDim2.new(0, mainSize, 0, 0)

      local iconLabel
      if config.Icon then
        local iconThemeTag = { ImageColor3 = "Text" }
        if string.find(config.Icon, "rbxassetid://") or not Helpers.Icon(tostring(config.Icon))[1] then
          iconThemeTag = nil
        end

        iconLabel = New("ImageLabel", {
          Size = UDim2.new(0, 24, 0, 24),
          BackgroundTransparency = 1,
          LayoutOrder = -1,
          ThemeTag = iconThemeTag
        })

        if string.find(config.Icon, "rbxassetid://") or string.find(config.Icon, "http://www.roblox.com/asset/?id=") then
          iconLabel.Image = config.Icon
        elseif string.find(config.Icon, "http") then
          local success, errorMessage = pcall(function()
            if not isfile("WindUI/" .. Window.Folder .. "/Assets/.Icon.png") then
              local imageData = request({ Url = config.Icon, Method = "GET" }).Body
              writefile("WindUI/" .. Window.Folder .. "/Assets/.Icon.png", imageData)
            end
            iconLabel.Image = getcustomasset("WindUI/" .. Window.Folder .. "/Assets/.Icon.png")
          end)

          if not success then
            iconLabel:Destroy()
            warn("[ WindUI ]  '" .. identifyexecutor() .. "' doesnt support the URL Images. Error: " .. errorMessage)
          end
        else
          if Helpers.Icon(tostring(config.Icon))[1] then
            iconLabel.Image = Helpers.Icon(config.Icon)[1]
            iconLabel.ImageRectOffset = Helpers.Icon(config.Icon)[2].ImageRectPosition
            iconLabel.ImageRectSize = Helpers.Icon(config.Icon)[2].ImageRectSize
          end
        end
      end

      local titleLabel = New("TextLabel", {
        AutomaticSize = "XY",
        BackgroundTransparency = 1,
        Text = config.Title,
        FontFace = Font.new(Helpers.Font, Enum.FontWeight.SemiBold),
        ThemeTag = { TextColor3 = "Text" },
        TextSize = 20
      })

      local keySystemLabel = New("TextLabel", {
        AutomaticSize = "XY",
        BackgroundTransparency = 1,
        Text = "Key System",
        AnchorPoint = Vector2.new(1, 0.5),
        Position = UDim2.new(1, 0, 0.5, 0),
        TextTransparency = 1,
        FontFace = Font.new(Helpers.Font, Enum.FontWeight.Medium),
        ThemeTag = { TextColor3 = "Text" },
        TextSize = 16
      })

      local titleContainer = New("Frame", { BackgroundTransparency = 1, AutomaticSize = "XY" }, {
        New("UIListLayout", {
          Padding = UDim.new(0, 14),
          FillDirection = "Horizontal",
          VerticalAlignment = "Center"
        }),
        iconLabel,
        titleLabel
      })

      local titleAndKeySystem = New("Frame", {
        AutomaticSize = "Y",
        Size = UDim2.new(1, 0, 0, 0),
        BackgroundTransparency = 1
      }, { titleContainer, keySystemLabel })

      local keyInput = New("TextBox", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        TextXAlignment = "Left",
        PlaceholderText = "Enter Key...",
        FontFace = Font.new(Helpers.Font, Enum.FontWeight.Medium),
        ThemeTag = { TextColor3 = "Text", PlaceholderColor3 = "PlaceholderText" },
        TextSize = 18
      })

      local keyInputContainer, keyInputStroke = New("Frame", {
        BackgroundTransparency = 0.95,
        Size = UDim2.new(1, 0, 0, 42),
        ThemeTag = { BackgroundColor3 = "Text" }
      }, {
        New("UIStroke", { Thickness = 1.3, ThemeTag = { Color = "Text" }, Transparency = 0.9 }),
        New("UICorner", { CornerRadius = UDim.new(0, 12) }),
        keyInput,
        New("UIPadding", { PaddingLeft = UDim.new(0, 12), PaddingRight = UDim.new(0, 12) })
      })

      local noteLabel
      if config.KeySystem.Note and config.KeySystem.Note ~= "" then
        noteLabel = New("TextLabel", {
          Size = UDim2.new(1, 0, 0, 0),
          AutomaticSize = "Y",
          FontFace = Font.new(Helpers.Font, Enum.FontWeight.Medium),
          TextXAlignment = "Left",
          Text = config.KeySystem.Note,
          TextSize = 18,
          TextTransparency = 0.4,
          ThemeTag = { TextColor3 = "Text" },
          BackgroundTransparency = 1,
          RichText = true
        })
      end

      local buttonContainer, createButton = New("Frame", {
        Size = UDim2.new(1, 0, 0, 42),
        BackgroundTransparency = 1
      }, {
        New("Frame", {
          BackgroundTransparency = 1,
          AutomaticSize = "X",
          Size = UDim2.new(0, 0, 1, 0)
        }, {
          New("UIListLayout", { Padding = UDim.new(0, 9), FillDirection = "Horizontal" })
        })
      }), function(text, icon, callback, variant, parent)
        local theme = "Text"

        local button = New("TextButton", {
          Size = UDim2.new(0, 0, 1, 0),
          AutomaticSize = "XY",
          Parent = parent,
          ThemeTag = { BackgroundColor3 = theme },
          BackgroundTransparency = variant == "Primary" and 0.1 or variant == "Secondary" and 0.85 or 0.95
        }, {
          New("UICorner", { CornerRadius = UDim.new(0, 12) }),
          New("Frame", {
            Size = UDim2.new(1, 0, 1, 0),
            ThemeTag = { BackgroundColor3 = variant == "Primary" and "Accent" or theme },
            BackgroundTransparency = 1
          }, {
            New("UIStroke", {
              Thickness = 1.3,
              ThemeTag = { Color = "Text" },
              Transparency = variant == "Tertiary" and 0.9 or 1
            }),
            New("UIPadding", { PaddingLeft = UDim.new(0, 12), PaddingRight = UDim.new(0, 12) }),
            New("UICorner", { CornerRadius = UDim.new(0, 12) }),
            New("UIListLayout", {
              FillDirection = "Horizontal",
              Padding = UDim.new(0, 12),
              VerticalAlignment = "Center",
              HorizontalAlignment = "Center"
            }),
            New("ImageLabel", {
              Image = Helpers.Icon(icon)[1],
              ImageRectSize = Helpers.Icon(icon)[2].ImageRectSize,
              ImageRectOffset = Helpers.Icon(icon)[2].ImageRectPosition,
              Size = UDim2.new(0, 21, 0, 21),
              BackgroundTransparency = 1,
              ThemeTag = { ImageColor3 = variant ~= "Primary" and theme or "Accent" }
            }),
            New("TextLabel", {
              BackgroundTransparency = 1,
              FontFace = Font.new(Helpers.Font, Enum.FontWeight.Medium),
              Text = text,
              ThemeTag = { TextColor3 = variant ~= "Primary" and theme or "Accent" },
              AutomaticSize = "XY",
              TextSize = 18
            })
          })
        })

        button.MouseEnter:Connect(function()
          Tween(button.Frame, 0.067, { BackgroundTransparency = 0.9 }):Play()
        end)

        button.MouseLeave:Connect(function()
          Tween(button.Frame, 0.067, { BackgroundTransparency = 1 }):Play()
        end)

        button.MouseButton1Up:Connect(function()
          callback()
        end)

        return button
      end

      local thumbnailLabel
      if config.KeySystem.Thumbnail and config.KeySystem.Thumbnail.Image then
        local thumbnailTitle
        if config.KeySystem.Thumbnail.Title then
          thumbnailTitle = New("TextLabel", {
            Text = config.KeySystem.Thumbnail.Title,
            ThemeTag = { TextColor3 = "Text" },
            TextSize = 18,
            FontFace = Font.new(Helpers.Font, Enum.FontWeight.Medium),
            BackgroundTransparency = 1,
            AutomaticSize = "XY",
            AnchorPoint = Vector2.new(0.5, 0.5),
            Position = UDim2.new(0.5, 0, 0.5, 0)
          })
        end

        thumbnailLabel = New("ImageLabel", {
          Image = config.KeySystem.Thumbnail.Image,
          BackgroundTransparency = 1,
          Size = UDim2.new(0, thumbnailSize, 1, 0),
          Parent = uiElements.UIElements.Main,
          ScaleType = "Crop"
        }, {
          thumbnailTitle,
          New("UICorner", { CornerRadius = UDim.new(0, 0) })
        })
      end

      local mainContent, exitButton = New("Frame", {
        Size = UDim2.new(1, thumbnailLabel and -thumbnailSize or 0, 1, 0),
        Position = UDim2.new(0, thumbnailLabel and thumbnailSize or 0, 0, 0),
        BackgroundTransparency = 1,
        Parent = uiElements.UIElements.Main
      }, {
        New("Frame", {
          Size = UDim2.new(1, 0, 1, 0),
          BackgroundTransparency = 1
        }, {
          New("UIListLayout", { Padding = UDim.new(0, 18), FillDirection = "Vertical" }),
          titleAndKeySystem,
          noteLabel,
          keyInputContainer,
          buttonContainer,
          New("UIPadding", {
            PaddingTop = UDim.new(0, 16),
            PaddingLeft = UDim.new(0, 16),
            PaddingRight = UDim.new(0, 16),
            PaddingBottom = UDim.new(0, 16)
          })
        })
      }), createButton("Exit", "log-out", uiElements:Close(), "Tertiary", buttonContainer.Frame)

      if thumbnailLabel then
        mainContent.Parent = thumbnailLabel
        mainContent.Size = UDim2.new(0, 0, 0, 42)
        mainContent.Position = UDim2.new(0, 16, 1, -16)
        mainContent.AnchorPoint = Vector2.new(0, 1)
      end

      if config.KeySystem.URL then
        createButton("Get key", "key", function()
          setclipboard(config.KeySystem.URL)
        end, "Secondary", buttonContainer.Frame)
      end

      local submitButton = createButton("Submit", "arrow-right", function()
        local keyText = keyInput.Text
        local isValidKey = tostring(config.KeySystem.Key) == tostring(keyText)

        if type(config.KeySystem.Key) == "table" then
          isValidKey = table.find(config.KeySystem.Key, tostring(keyText))
        end

        if isValidKey then
          uiElements:Close()()

          if config.KeySystem.SaveKey then
            local folderName = config.Folder or config.Title
            writefile(folderName .. "/" .. key .. ".key", tostring(keyText))
          end

          task.wait(0.4)
          keySavedCallback(true)
        else
          local defaultStrokeColor = keyInputContainer.UIStroke.Color
          local defaultBackgroundColor = keyInputContainer.BackgroundColor3

          Tween(keyInputContainer.UIStroke, 0.1, { Color = Color3.fromHex("#ff1e1e"), Transparency = 0.65 }):Play()
          Tween(keyInputContainer, 0.1, { BackgroundColor3 = Color3.fromHex("#ff1e1e"), Transparency = 0.8 }):Play()

          task.wait(0.5)

          Tween(keyInputContainer.UIStroke, 0.15, { Color = defaultStrokeColor, Transparency = 0.9 }):Play()
          Tween(keyInputContainer, 0.15, { BackgroundColor3 = defaultBackgroundColor, Transparency = 0.95 }):Play()
        end
      end, "Primary", buttonContainer)

      submitButton.AnchorPoint = Vector2.new(1, 0.5)
      submitButton.Position = UDim2.new(1, 0, 0.5, 0)

      uiElements:Open()

      return uiElements
    end

    return UI
  end

  -- Notification module
  function WindUI.Notification()
    local Helpers = WindUI.load("Helpers")
    local New = Helpers.New
    local Tween = Helpers.Tween

    local NotificationModule = {
      Size = UDim2.new(0, 300, 1, -156),
      SizeLower = UDim2.new(0, 300, 1, -56),
      UICorner = 16,
      UIPadding = 14,
      ButtonPadding = 9,
      Holder = nil,
      NotificationIndex = 0,
      Notifications = {}
    }

    function NotificationModule:Init(notificationParent)
      local settings = { Lower = false }

      function settings:SetLower(isLower)
        settings.Lower = isLower
        settings
        非常抱歉！我的输出被中断了。以下是剩下的美化代码，我已经尽可能地保持了它与之前输出的连贯性：

        settings.Frame.Size = isLower and NotificationModule.SizeLower or NotificationModule.Size
              end
        
              settings.Frame = New("Frame", {
                Position = UDim2.new(1, -29, 0, 56),
                AnchorPoint = Vector2.new(1, 0),
                Size = NotificationModule.Size,
                Parent = notificationParent,
                BackgroundTransparency = 1
              }, {
                New("UIListLayout", {
                  HorizontalAlignment = "Center",
                  SortOrder = "LayoutOrder",
                  VerticalAlignment = "Bottom",
                  Padding = UDim.new(0, 8)
                }),
                New("UIPadding", { PaddingBottom = UDim.new(0, 29) })
              })
        
              return settings
            end
        
            function NotificationModule:New(notificationData)
              local notification = {
                Title = notificationData.Title or "Notification",
                Content = notificationData.Content or nil,
                Icon = notificationData.Icon or nil,
                Background = notificationData.Background,
                Duration = notificationData.Duration or 5,
                Buttons = notificationData.Buttons or {},
                CanClose = true,
                UIElements = {},
                Closed = false
              }
        
              if notification.CanClose == nil then
                notification.CanClose = true
              end
        
              NotificationModule.NotificationIndex = NotificationModule.NotificationIndex + 1
              NotificationModule.Notifications[NotificationModule.NotificationIndex] = notification
        
              local corner = New("UICorner", { CornerRadius = UDim.new(0, NotificationModule.UICorner) })
              local stroke = New("UIStroke", { ThemeTag = { Color = "Text" }, Transparency = 1, Thickness = 0.6 })
        
              local iconImage
              if notification.Icon then
                local iconInfo = Helpers.Icon(notification.Icon)
                if iconInfo and iconInfo[2] then
                  iconImage = New("ImageLabel", {
                    Size = UDim2.new(0, 26, 0, 26),
                    Position = UDim2.new(0, NotificationModule.UIPadding, 0, NotificationModule.UIPadding),
                    BackgroundTransparency = 1,
                    Image = iconInfo[1],
                    ImageRectSize = iconInfo[2].ImageRectSize,
                    ImageRectOffset = iconInfo[2].ImageRectPosition,
                    ThemeTag = { ImageColor3 = "Text" }
                  })
                elseif string.find(notification.Icon, "rbxassetid") then
                  iconImage = New("ImageLabel", {
                    Size = UDim2.new(0, 26, 0, 26),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, NotificationModule.UIPadding, 0, NotificationModule.UIPadding),
                    Image = notification.Icon
                  })
                end
              end
        
              local closeButton
              if notification.CanClose then
                local iconInfo = Helpers.Icon("x")
                closeButton = New("ImageButton", {
                  Image = iconInfo[1],
                  ImageRectSize = iconInfo[2].ImageRectSize,
                  ImageRectOffset = iconInfo[2].ImageRectPosition,
                  BackgroundTransparency = 1,
                  Size = UDim2.new(0, 16, 0, 16),
                  Position = UDim2.new(1, -NotificationModule.UIPadding, 0, NotificationModule.UIPadding),
                  AnchorPoint = Vector2.new(1, 0),
                  ThemeTag = { ImageColor3 = "Text" }
                }, {
                  New("TextButton", {
                    Size = UDim2.new(1, 8, 1, 8),
                    BackgroundTransparency = 1,
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    Text = ""
                  })
                })
              end
        
              local progressBar = New("Frame", {
                Size = UDim2.new(1, 0, 0, 3),
                BackgroundTransparency = 0.9,
                ThemeTag = { BackgroundColor3 = "Text" }
              })
        
              local contentFrame = New("Frame", {
                Size = UDim2.new(1, notification.Icon and -28 - NotificationModule.UIPadding or 0, 1, 0),
                Position = UDim2.new(1, 0, 0, 0),
                AnchorPoint = Vector2.new(1, 0),
                BackgroundTransparency = 1,
                AutomaticSize = "Y"
              }, {
                New("UIPadding", {
                  PaddingTop = UDim.new(0, NotificationModule.UIPadding),
                  PaddingLeft = UDim.new(0, NotificationModule.UIPadding),
                  PaddingRight = UDim.new(0, NotificationModule.UIPadding),
                  PaddingBottom = UDim.new(0, NotificationModule.UIPadding)
                }),
                New("TextLabel", {
                  AutomaticSize = "Y",
                  Size = UDim2.new(1, -30 - NotificationModule.UIPadding, 0, 0),
                  TextWrapped = true,
                  TextXAlignment = "Left",
                  RichText = true,
                  BackgroundTransparency = 1,
                  TextSize = 16,
                  ThemeTag = { TextColor3 = "Text" },
                  Text = notification.Title,
                  FontFace = Font.new(Helpers.Font, Enum.FontWeight.SemiBold)
                }),
                New("UIListLayout", { Padding = UDim.new(0, NotificationModule.UIPadding / 3) })
              })
        
              if notification.Content then
                New("TextLabel", {
                  AutomaticSize = "Y",
                  Size = UDim2.new(1, 0, 0, 0),
                  TextWrapped = true,
                  TextXAlignment = "Left",
                  RichText = true,
                  BackgroundTransparency = 1,
                  TextTransparency = 0.4,
                  TextSize = 15,
                  ThemeTag = { TextColor3 = "Text" },
                  Text = notification.Content,
                  FontFace = Font.new(Helpers.Font, Enum.FontWeight.Medium),
                  Parent = contentFrame
                })
              end
        
              local canvasGroup = New("CanvasGroup", {
                Size = UDim2.new(1, 0, 0, 0),
                Position = UDim2.new(2, 0, 1, 0),
                AnchorPoint = Vector2.new(0, 1),
                AutomaticSize = "Y",
                BackgroundTransparency = 0.25,
                ThemeTag = { BackgroundColor3 = "Accent" }
              }, {
                New("ImageLabel", {
                  Name = "Background",
                  Image = notification.Background,
                  BackgroundTransparency = 1,
                  Size = UDim2.new(1, 0, 1, 0),
                  ScaleType = "Crop"
                }),
                stroke,
                corner,
                contentFrame,
                iconImage,
                closeButton,
                progressBar
              })
        
              local notificationFrame = New("Frame", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 0),
                Parent = NotificationModule.Holder
              }, { canvasGroup })
        
              function notification:Close()
                if not notification.Closed then
                  notification.Closed = true
        
                  Tween(notificationFrame, 0.45, { Size = UDim2.new(1, 0, 0, -8) }, Enum.EasingStyle.Quint, Enum.EasingDirection.Out):Play()
                  Tween(canvasGroup, 0.55, { Position = UDim2.new(2, 0, 1, 0) }, Enum.EasingStyle.Quint, Enum.EasingDirection.Out):Play()
        
                  task.wait(0.45)
                  notificationFrame:Destroy()
                end
              end
        
              task.spawn(function()
                task.wait()
        
                Tween(notificationFrame, 0.45, { Size = UDim2.new(1, 0, 0, canvasGroup.AbsoluteSize.Y) }, Enum.EasingStyle.Quint, Enum.EasingDirection.Out):Play()
                Tween(canvasGroup, 0.45, { Position = UDim2.new(0, 0, 1, 0) }, Enum.EasingStyle.Quint, Enum.EasingDirection.Out):Play()
        
                if notification.Duration then
                  Tween(progressBar, notification.Duration, { Size = UDim2.new(0, 0, 0, 3) }, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut):Play()
                  task.wait(notification.Duration)
                  notification:Close()
                end
              end)
        
              if closeButton then
                closeButton.TextButton.MouseButton1Click:Connect(function()
                  notification:Close()
                end)
              end
        
              return notification
            end
        
            return NotificationModule
          end
        
          -- Dialog window module
          function WindUI.DialogWindow()
            local Helpers = WindUI.load("Helpers")
            local New = Helpers.New
            local Tween = Helpers.Tween
            local KeySystemModule = WindUI.load("KeySystem")
        
            function DialogWindow:new(config)
              local dialogData, KeySystem = {
                Title = config.Title or "Dialog",
                Content = config.Content,
                Icon = config.Icon,
                Thumbnail = config.Thumbnail,
                Buttons = config.Buttons
              }, WindUI.load("KeySystem"):Init(config.WindUI.ScreenGui.Popups)
              local uiElements, thumbnailSize, mainSize = KeySystem:Create(true), 200, 430
        
              if dialogData.Thumbnail and dialogData.Thumbnail.Image then
                mainSize = 430 + (thumbnailSize / 2)
              end
        
              uiElements.UIElements.Main.AutomaticSize = "Y"
              uiElements.UIElements.Main.Size = UDim2.new(0, mainSize, 0, 0)
        
              local iconLabel
              if dialogData.Icon then
                local iconThemeTag = { ImageColor3 = "Text" }
                if string.find(dialogData.Icon, "rbxassetid://") or not Helpers.Icon(tostring(dialogData.Icon))[1] then
                  iconThemeTag = nil
                end
        
                iconLabel = New("ImageLabel", {
                  Size = UDim2.new(0, 24, 0, 24),
                  BackgroundTransparency = 1,
                  LayoutOrder = -1,
                  ThemeTag = iconThemeTag
                })
        
                if string.find(dialogData.Icon, "rbxassetid://") or string.find(dialogData.Icon, "http://www.roblox.com/asset/?id=") then
                  iconLabel.Image = dialogData.Icon
                elseif string.find(dialogData.Icon, "http") then
                  local success, errorMessage = pcall(function()
                    if not isfile("WindUI/" .. Window.Folder .. "/Assets/.Icon.png") then
                      local imageData = request({ Url = dialogData.Icon, Method = "GET" }).Body
                      writefile("WindUI/" .. Window.Folder .. "/Assets/.Icon.png", imageData)
                    end
                    iconLabel.Image = getcustomasset("WindUI/" .. Window.Folder .. "/Assets/.Icon.png")
                  end)
        
                  if not success then
                    iconLabel:Destroy()
                    warn("[ WindUI ]  '" .. identifyexecutor() .. "' doesnt support the URL Images. Error: " .. errorMessage)
                  end
                else
                  local iconInfo = Helpers.Icon(tostring(dialogData.Icon))
                  if iconInfo and iconInfo[1] then
                    iconLabel.Image = iconInfo[1]
                    iconLabel.ImageRectOffset = iconInfo[2].ImageRectPosition
                    iconLabel.ImageRectSize = iconInfo[2].ImageRectSize
                  end
                end
              end
        
              local titleLabel = New("TextLabel", {
                AutomaticSize = "XY",
                BackgroundTransparency = 1,
                Text = dialogData.Title,
                FontFace = Font.new(Helpers.Font, Enum.FontWeight.SemiBold),
                ThemeTag = { TextColor3 = "Text" },
                TextSize = 20
              })
        
              local titleContainer = New("Frame", { BackgroundTransparency = 1, AutomaticSize = "XY" }, {
                New("UIListLayout", {
                  Padding = UDim.new(0, 14),
                  FillDirection = "Horizontal",
                  VerticalAlignment = "Center"
                }),
                iconLabel,
                titleLabel
              })
        
              local mainContent = New("Frame", {
                AutomaticSize = "Y",
                Size = UDim2.new(1, 0, 0, 0),
                BackgroundTransparency = 1
              }, { titleContainer })
        
              if dialogData.Content and dialogData.Content ~= "" then
                New("TextLabel", {
                  Size = UDim2.new(1, 0, 0, 0),
                  AutomaticSize = "Y",
                  FontFace = Font.new(Helpers.Font, Enum.FontWeight.Medium),
                  TextXAlignment = "Left",
                  Text = dialogData.Content,
                  TextSize = 18,
                  TextTransparency = 0.4,
                  ThemeTag = { TextColor3 = "Text" },
                  BackgroundTransparency = 1,
                  RichText = true,
                  Parent = mainContent
                })
              end
        
              local buttonContainer = New("Frame", {
                Size = UDim2.new(1, 0, 0, 42),
                BackgroundTransparency = 1
              }, {
                New("UIListLayout", {
                  Padding = UDim.new(0, 9),
                  FillDirection = "Horizontal",
                  HorizontalAlignment = "Right"
                })
              })
        
              local createButton = function(text, icon, callback, variant, parent)
                local theme = "Text"
                local button = New("TextButton", {
                  Size = UDim2.new(0, 0, 1, 0),
                  AutomaticSize = "XY",
                  Parent = parent,
                  ThemeTag = { BackgroundColor3 = theme },
                  BackgroundTransparency = variant == "Primary" and 0.1 or variant == "Secondary" and 0.85 or 0.95
                }, {
                  New("UICorner", { CornerRadius = UDim.new(0, 12) }),
                  New("Frame", {
                    Size = UDim2.new(1, 0, 1, 0),
                    ThemeTag = { BackgroundColor3 = variant == "Primary" and "Accent" or theme },
                    BackgroundTransparency = 1
                  }, {
                    New("UIStroke", {
                      Thickness = 1.3,
                      ThemeTag = { Color = "Text" },
                      Transparency = variant == "Tertiary" and 0.9 or 1
                    }),
                    New("UIPadding", { PaddingLeft = UDim.new(0, 12), PaddingRight = UDim.new(0, 12) }),
                    New("UICorner", { CornerRadius = UDim.new(0, 12) }),
                    New("UIListLayout", {
                      FillDirection = "Horizontal",
                      Padding = UDim.new(0, 12),
                      VerticalAlignment = "Center",
                      HorizontalAlignment = "Center"
                    }),
                    New("ImageLabel", {
                      Image = Helpers.Icon(icon)[1],
                      ImageRectSize = Helpers.Icon(icon)[2].ImageRectSize,
                      ImageRectOffset = Helpers.Icon(icon)[2].ImageRectPosition,
                      Size = UDim2.new(0, 21, 0, 21),
                      BackgroundTransparency = 1,
                      ThemeTag = { ImageColor3 = variant ~= "Primary" and theme or "Accent" }
                    }),
                    New("TextLabel", {
                      BackgroundTransparency = 1,
                      FontFace = Font.new(Helpers.Font, Enum.FontWeight.Medium),
                      Text = text,
                      ThemeTag = { TextColor3 = variant ~= "Primary" and theme or "Accent" },
                      AutomaticSize = "XY",
                      TextSize = 18
                    })
                  })
                })
        
                button.MouseEnter:Connect(function()
                  Tween(button.Frame, 0.067, { BackgroundTransparency = 0.9 }):Play()
                end)
        
                button.MouseLeave:Connect(function()
                  Tween(button.Frame, 0.067, { BackgroundTransparency = 1 }):Play()
                end)
        
                button.MouseButton1Up:Connect(function()
                  uiElements:Close()
                  callback()
                end)
        
                return button
              end
        
              local thumbnailLabel
              if dialogData.Thumbnail and dialogData.Thumbnail.Image then
                local thumbnailTitle
                if dialogData.Thumbnail.Title then
                  thumbnailTitle = New("TextLabel", {
                    Text = dialogData.Thumbnail.Title,
                    ThemeTag = { TextColor3 = "Text" },
                    TextSize = 18,
                    FontFace = Font.new(Helpers.Font, Enum.FontWeight.Medium),
                    BackgroundTransparency = 1,
                    AutomaticSize = "XY",
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    Position = UDim2.new(0.5, 0, 0.5, 0)
                  })
                end
        
                thumbnailLabel = New("ImageLabel", {
                  Image = dialogData.Thumbnail.Image,
                  BackgroundTransparency = 1,
                  Size = UDim2.new(0, thumbnailSize, 1, 0),
                  Parent = uiElements.UIElements.Main,
                  ScaleType = "Crop"
                }, {
                  thumbnailTitle,
                  New("UICorner", { CornerRadius = UDim.new(0, 0) })
                })
              end
        
              local buttons = dialogData.Buttons or {}
              for i, buttonData in next, buttons do
                createButton(buttonData.Title, buttonData.Icon, buttonData.Callback, buttonData.Variant, buttonContainer)
              end
        
              local buttonsAndMainContent = New("Frame", {
                Size = UDim2.new(1, thumbnailLabel and -thumbnailSize or 0, 1, 0),
                Position = UDim2.new(0, thumbnailLabel and thumbnailSize or 0, 0, 0),
                BackgroundTransparency = 1,
                Parent = uiElements.UIElements.Main
              }, {
                New("Frame", {
                  Size = UDim2.new(1, 0, 1, 0),
                  BackgroundTransparency = 1
                }, {
                  New("UIListLayout", { Padding = UDim.new(0, 18), FillDirection = "Vertical" }),
                  titleContainer,
                  mainContent,
                  buttonContainer,
                  New("UIPadding", {
                    PaddingTop = UDim.new(0, 16),
                    PaddingLeft = UDim.new(0, 16),
                    PaddingRight = UDim.new(0, 16),
                    PaddingBottom = UDim.new(0, 16)
                  })
                })
              })
        
              if thumbnailLabel then
                buttonsAndMainContent.Parent = thumbnailLabel
                buttonsAndMainContent.Size = UDim2.new(0, 0, 0, 42)
                buttonsAndMainContent.Position = UDim2.new(0, 16, 1, -16)
                buttonsAndMainContent.AnchorPoint = Vector2.new(0, 1)
              end
        
              uiElements:Open()
        
              return uiElements
            end
            return DialogWindow
        end
        
          -- Generic paragraph module
          function WindUI.GenericParagraph()
            local Helpers = WindUI.load("Helpers")
            local New = Helpers.New
            local Tween = Helpers.Tween
          
            return function(frameData)
                local frame = {
                    Title = frameData.Title,
                    Description = frameData.Description,
                    Hover = frameData.Hover,
                    Color = frameData.Color,
                    Image = frameData.Image,
                    ImageSize = frameData.ImageSize,
                    UIPadding = frameData.UIPadding
                }
                return frame
            end
          end
          
        -- Require other modules
        
        local Helpers = WindUI.load("Helpers")
        
        -- Make the WindUI table globally accessible
        return WindUI
